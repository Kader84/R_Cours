a
source("/Users/abdelkader-lounis/quizz3.R")
source("/Users/abdelkader-lounis/quizz3.R")
x
a
x()
source("/Users/abdelkader-lounis/quizz3.R")
x()
source("/Users/abdelkader-lounis/quizz3.R")
x(1)
source("/Users/abdelkader-lounis/quizz3.R")
x(1)
source("/Users/abdelkader-lounis/quizz3.R")
x(1)
?apply
x <- apply(iris$Sepal.Length,MARGIN = 2,iris$Species=="virginica")
x <- by(iris$Sepal.Length,Species,mean)
x <- by(iris[,1],Species,mean)
x <- by(iris[,1],Species,colMeans)
by(iris[,1],Species,colMeans)
by(iris[,1],iris$Species,colMeans)
by(iris[,1:3],iris$Species,colMeans)
by(iris[,1:3],iris$Species,Mean)
by(iris[,1:3],iris$Species,colMeans)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
data(mtcars)
?mtcars
data("mtcars")
library(datasets)
data("mtcars")
library(datasets)
data("mtcars")
tapply(mtcars$hp,mtcars$cyl,mean)
x <- tapply(mtcars$hp,mtcars$cyl,mean)
x['8'] - x['4']
debug(ls)
ls
ls(2)
library(datasets)
data("mtcars")
data("iris")
tapply
tapply(iris$Sepal.Length,iris$Species,mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
library(datasets)
data("mtcars")
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
lapply(mtcars, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)$4
x <- tapply(mtcars$hp, mtcars$cyl, mean)
abs(x['4'] - x['8'])
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(mtcars$mpg)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(mtcars$mpg)
makeVector(mtcars$mpg)
cachemean(mtcars$mpg)
cachemean(mtcars$mpg)
cachemean(x)
cachemean(mtcars$mpg,... )
cachemean(x = mtcars$mpg)
m <- NULL
m
set <- function (y) {}
set <- function (y) {x<<-y ;m<<-NULL}
View(set)
set(y = c(2,3,5))
View(set)
View(set)
m
y
x
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(x=c(2,3,6))
makeVector(x=c(2,3,6))
m
getmean(c(2,3,6))
getmean(x)
a <- function () b
View(a)
a(1)
a
a()
a(b=1)
a(1)
a('2')
a('2')
View(a)
a()
a() 2
a()()
a()(2)
a(2)()
a(b)()
a("1")()
a("2
")()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
#Set the value of the matrix
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
s_inverse <- function (inverse) inv <<- inverse
g_inverse <- function () inv
list(set = set , get = get,
s_inverse = s_inverse,
g_inverse = g_inverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$g_inverse()
if (!is.null(inv)) {
message("Getting Cached Date")
return(inv)
}
data <- x$get()
inv <- solve(data,...)
x$s_inverse(inv)
inv
}
x <- matrix(rnorm(16), nrow = 4)
cx <- makeCacheMatrix(x)
cx$get()
cacheSolve(cx)
cacheSolve(cx)
cacheSolve(cx)
source("/Users/abdelkader-lounis/Documents/CoursR/ProgrammingAssignment2/cachematrix.R")
x <- matrix(rnorm(25), nrow = 5)
y <- makeCacheMatrix(x)
y$get()
cacheSolve(y)
cacheSolve(y)
makeCacheMatrix <- function(x = matrix()) {
-
+  m <- NULL
+  set <- function(y) {
+    x <<- y
+    m <<- NULL
+  }
+  get <- function() x
+  setsolve <- function(solve) m <<- solve
+  getsolve <- function() m
+  list(set = set, get = get,
+       setsolve = setsolve,
+       getsolve = getsolve)
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
set.seed(1)
rpois(5,2)
set.seed(10)
x <- rep(0:1, each = 5)
x
e = rnorm (10, 0, 20)
y <- 0.5 + 2 * x + e
y
plot (y,x)
plot (x,y)
a <- rbinom(100, 1, 0.5)
a
set.seed(1)
rpois(5, 2)
library (datasets)
Rprof()
fit <- lm(y ~ x)
Rprof(NULL)
summaryRprof()
swirl()
library(swirl)
swirl()
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
submit()
?func
submit()
submit()
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1,]}, c(8, 4, 0))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[-1]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("Bonjour,"Kader")
telegram("Bonjour","Kader")
submit()
submit()
submit()
submit()
View(mad_libs)
View(mad_libs)
View(mad_libs)
View(mad_libs)
View(mad_libs)
submit()
submit()
mad_libs(place = "London", adjustive = "beautiful", noun = "dog")
submit()
`I %p% love R!`
"I love" %p% "R!"
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_list <- sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flags_colors[1:6,])
head(flags_colors[1:6])
head(flag_colors[1:6,])
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes,range)
sapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
lapply(flags,unique)
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
sapll
sapply(unique_vals,lenght)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head()
head(plants)
head(plants[10,])
head(plants, 10)
tail(plants)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1),100,replace = TRUE,prob = c(0.3, 0.7))
flips
sum(flips)
?rbind
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,100,25)
?rpois
rpois(5)
rpois(5,10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays()
weekdays()
?weekdays
weekdays(Sys.Date())
weekdays(d1)
months(d1)
months(t1)
quartesr(t2)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
cars
?cars
head(cars)
plot(cars)
?plot
plot(dist,speed)
plot()
plot(cars,)
plot(cars)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$dist, y = cars$speed,labels(cars$speed = "Speed"))
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed",ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed",ylab = "Stopping Distance", title("My Plot"))
Type plot(cars, main = "My Plot")
plot(cars, main = "My Plot")
plot(cars)
plot(cars, sub = "My Plot Subtitle")
View(cars)
plot(cars, col = 2)
plot(cars)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
load(mtcars)
load("mtcars")
?load
load(mtcars)
load.data(mtcars)
data(mtcars)
boxplot(mtcars)
?boxplot
boxplot(data = mtcars, formula = mpg ~ cyl)
boxplot(mpg ~ cyl, mtcars)
hist(mtcars$mpg)
library(xlsx)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
getwd()
setwd("/Users/abdelkader-lounis/Documents/CoursR/R_Cours/GetAndClearData/")
getwd()
xdata <- download.file(fileUrl,destfile = "dataGaz.xlsx",method = "curl")
xdata
xxdata <- read.xlsx("dataGaz.xlsx",sheetIndex = 1,colIndex = 7:15,rowIndex = 18:23)
xxdata
dat <- read.xlsx("dataGaz.xlsx",sheetIndex = 1,colIndex = 7:15,rowIndex = 18:23)
dat
sum(dat$Zip*dat$Ext,na.rm=T)
urlxml <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
library()
install.packages("XML")
library(XML)
dataxml <- xmlTree()
dataxml <- xmlTreeParse(urlxml,useInternal =TRUE)
dataxml <- xmlTreeParse(urlxml,useInternalNodes = T)
urlxml <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
dataxml <- xmlTreeParse(urlxml,useInternal =TRUE)
dataxml <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml",useInternal =TRUE)
urlxml <- sub('https','https',"http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
dataxml <- xmlTreeParse(urlxml,useInternal =TRUE)
rootNode <- xmlRoot(dataxml)
xmlName(rootNode)
names(rootNode)
xmlSApply(rootNode,xmlValue)
xpathApply(rootNode,"@zipcode='21231'",xmlValue)
xpathApply(rootNode,"@zipcode=21231",xmlValue)
xpathSApply(rootNode,"@zipcode=21231",xmlValue)
xpathSApply(rootNode,"//zipcode[@zipcode=21231]",xmlValue)
zipcod <- xpathSApply(rootNode,"//zipcode[@zipcode=21231]",xmlValue)
zipcod
zipcod <- xpathSApply(rootNode,"//zipcode",xmlValue)
zipcod
zipcod <- xpathSApply(rootNode,"[@zipcode='21231']",xmlValue)
zipcod <- xpathSApply(rootNode,"//zipcode",xmlValue)
zipcod2 <- table(zipcod="21231")
zipcod2
zipcod2 <- sum(zipcod="21231")
zipcod2 <- summary.table(zipcod="21231")
zipcod2 <- summary.table(zipcod)
zipcod2 <- length(zipcod)
zipcod2
zipcod2 <- length(zipcod="21231")
zipcod2 <- length(zipcode="21231")
zipcod2 <- length("21231")
zipcod2 <- table("21231")
zipcod2
zipcod2 <- length(zipcode[zipcode=="21231"])
zipcod <- xpathSApply(rootNode,"//zipcode",xmlValue)
zipcod2 <- length(zipcod[zipcod=="21231"])
zipcod2
xdata
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrl1,destfile = "w1data1.csv",method = "curl")
datedownloaded <- date()
print(datedownloaded)
library(data.table)
install.packages("data.table")
library(data.table)
DT <- fread(input="w1data1.csv", sep=",")
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(mean(DT[DT$SEX==1,]$pwgtp15))
system.time(mean(DT[DT$SEX==2,]$pwgtp15))
install.packages("RmySQL")
install.packages("RMySQL")
uscsDB <- dbConnect(MySQL(),user="genome", host="genome-mysql.cse.ucsc.edu")
library(RMySQL)
uscsDB <- dbConnect(MySQL(),user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(uscsDB,"show database;"); dbDisconnect(uscsDB)
result <- dbGetQuery(uscsDB,"show database;"); dbDisconnect(uscsDB);
result <- dbGetQuery(uscsDB,"show databases;"); dbDisconnect(uscsDB);
result
View(result)
hg19 <- dbConnect(MySQL(),user="genome",db="hg19" host="genome-mysql.cse.ucsc.edu")
hg19 <- dbConnect(MySQL(),user="genome",db="hg19",host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
